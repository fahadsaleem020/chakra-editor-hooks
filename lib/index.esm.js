import{useState as e,useReducer as t,useMemo as r,useEffect as a}from"react";const s=()=>{const[t,r]=e(""),[a,s]=e(!1);return{disclosureProps:{id:t,isOpen:a,defaultIsOpen:a,onClose:()=>s(!1),onOpen:e=>{r(e),s(!0)}}}},o=e=>e?.storage,n=(e,{type:t,payload:r})=>{switch(t){case"activate":for(const t of e.slice(0,r?.rowIndex+1))t.slice(0,r?.cellIndex+1).flatMap((e=>e.isActive=!0));return[...e];case"deactivate":return e.flatMap((e=>e.flatMap((e=>e.isActive=!1)))),[...e];case"generateRows":for(let t=0;t<r?.rows;t++)e.push([]);return[...e];case"generateColumns":for(let t=0;t<r?.columns;t++)e.flatMap((e=>e.push({isActive:!1})));return[...e];case"clear":return e=[],[...e];default:throw new Error("unknown table action")}},l=({columns:s,rows:o})=>{const[l,c]=e({columns:s,rows:o}),[u,i]=t(n,[]),[d,p]=e(!0),w=r((()=>({matrix:l,table:u,withHeader:d,updateTable:i,updateMatrix:c,setWithHeader:p})),[l,u,d]);return a((()=>(i({type:"generateRows",payload:{rows:o}}),i({type:"generateColumns",payload:{columns:s}}),()=>i({type:"clear"}))),[s,o]),w},c=(e,t)=>{const{updateAttributes:r,selected:s}=t;a((()=>(s&&t.node.attrs&&e?.swallowNodeAttributes(t.node.attrs),()=>e?.swallowNodeAttributes(void 0))),[t,e,s]),a((()=>(s&&setTimeout((()=>r(e?.attributes)),0),()=>e?.setNodeAttributes(void 0))),[e,s,r])},u=t=>{const[r,a]=e(t);return{handler:e=>{e.preventDefault();const t=new FormData(e.currentTarget),r=Object.fromEntries(t);return a(r),r},previous:r}};export{u as useForm,c as useNode,s as useRetapDisclosure,o as useStorage,l as useTable};
//# sourceMappingURL=index.esm.js.map
